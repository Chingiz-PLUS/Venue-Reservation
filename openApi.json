{
	"info": {
		"_postman_id": "a62a8a46-7caa-45a8-bce1-2cd077b04dd3",
		"name": "NodeJs-task",
		"description": "## Reservation API collection\n\nThis collection contains sample request from \\[API\\](http://localhost:3001)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17399722"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register User",
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "payload",
									"value": "{}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"Akif\",\n    \"email\":\"akif@gmail.com\",\n    \"password\":\"123Asdfg\",\n    \"confirmPassword\": \"123Asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "This endpoint is used to register a new user. The user needs to provide a `username`, `email`, `password`, and select a `user role` (e.g., admin, user). Upon successful registration, the user will be created in the system.\n\n- **Method**: `POST`\n    \n- **URL**: `/api/auth/register`\n    \n- **Body**: JSON containing:\n    \n    - `username` (String, required): The user's unique username.\n        \n    - `email` (String, required): A valid email address.\n        \n    - `password` (String, required): A strong password with specific requirements(should be minimum 8 simvols, at least one upper-case simvol, and one numeric).\n        \n    - `confirmPassword` (String, required): Need to repeat password.\n        \n    - `role` (String): The role of the user (admin or user). Default is user.\n        \n- **Response**:\n    \n    - **201 Created**: User registered successfully.\n        \n    - **422 Unprocessable Entity**: Validation error (e.g., password requirements not met, email already in use)."
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"akif@gmail.com\",\n    \"password\": \"123Asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/api/auth/login",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "This endpoint is used to authenticate an existing user. The user needs to provide their `username` or `email` and `password`. Upon successful login, a JSON Web Token (JWT) will be returned, which must be used for accessing protected routes.\n\n- **Method**: `POST`\n    \n- **URL**: `/api/auth/login`\n    \n- **Body**: JSON containing:\n    \n    - `email` (String, required): The user's email used during registration.\n        \n    - `password` (String, required): The user's password.\n        \n- **Response**:\n    \n    - **200 OK**: Login successful, returns a JWT token.\n        \n    - **401 Unauthorized**: Invalid username/email or password."
					},
					"response": []
				}
			],
			"description": "This collection provides APIs related to user authentication. It includes endpoints for user registration and login. The authentication is handled using JSON Web Tokens (JWT), which must be included in subsequent requests to protected resources. The key functionalities include:\n\n- **User Registration:** Register a new user by providing a username, email, password, and selecting a user role (e.g., admin, user).\n    \n- **User Login:** Authenticate a user and receive a JWT token for authorization."
		},
		{
			"name": "Venue",
			"item": [
				{
					"name": "Create Venue",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRiNDVhNTBiNDMwM2Y0NjlmZDZjZmIiLCJpYXQiOjE3MjU4Mjk5MTgsImV4cCI6MTcyNTkxNjMxOH0.JEqrZKAdSTqZ-pbuF_pNa8mjUCbR1WoFZ1At8Kd-moo",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Coffee Shop\",\n    \"location\": \"City Centre\",\n    \"capacity\": 20,\n    \"description\": \"Coffee Shop\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/api/venues",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"venues"
							]
						},
						"description": "This endpoint is used to create a new venue. The user must provide the venue's name, location, capacity and description. Only users with the admin role can perform this action. Authentication is required via a JWT token.\n\n- **Method**: `POST`\n    \n- **URL**: `/api/venues`\n    \n- **Authorization**: : Bearer `{{token}}`\n    \n- **Body**: JSON containing:\n    \n    - `name` (String, required): The name of the venue.\n        \n    - `location` (String, required): The address or location of the venue.\n        \n    - `capacity` (Number, required): The maximum number of people the venue can hold.\n        \n    - `description` (String, required): The desctiprion of the venue.\n        \n- **Response**:\n    \n    - **201 Created**: Venue created successfully.\n        \n    - **422 Unprocessable Entity**: Validation error (e.g., missing required fields)."
					},
					"response": []
				},
				{
					"name": "Get All Venues",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localUrl}}/api/venues?page=1&limit=10&location=city_centre",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"venues"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "location",
									"value": "city_centre"
								}
							]
						},
						"description": "This endpoint retrieves a list of all venues. It supports pagination and filtering by location. This endpoint is accessible by anyone.\n\n- **Method**: `GET`\n    \n- **URL**: `/api/venues`\n    \n- **Query Parameters**:\n    \n    - `page` (Number, optional): The page number to retrieve (default is 1).\n        \n    - `limit` (Number, optional): The number of venues per page (default is 10).\n        \n    - `location` (String, optional): A location to filter the venues by.\n        \n- **Response**:\n    \n    - **200 OK**: Returns a paginated list of venues, optionally filtered by location."
					},
					"response": []
				},
				{
					"name": "Get One Venue",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localUrl}}/api/venues/66db59993ab00ccc24c77280",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"venues",
								"66db59993ab00ccc24c77280"
							]
						},
						"description": "This endpoint retrieves the details of a specific venue by its ID. It is accessible by anyone.\n\n- **Method**: `GET`\n    \n- **URL**: `/api/venues/:id`\n    \n- **Response**:\n    \n    - **200 OK**: Returns the venue details for the specified ID.\n        \n    - **404 Not Found**: No venue found with the given ID."
					},
					"response": []
				},
				{
					"name": "Update Venue By ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRiNDVhNTBiNDMwM2Y0NjlmZDZjZmIiLCJpYXQiOjE3MjU4Mjk5MTgsImV4cCI6MTcyNTkxNjMxOH0.JEqrZKAdSTqZ-pbuF_pNa8mjUCbR1WoFZ1At8Kd-moo",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Sweet House 6\",\n    \"location\": \"Memar Acami\",\n    \"capacity\": 45,\n    \"description\": \"Coffee Shop\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/api/venues/66db59993ab00ccd24c77280",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"venues",
								"66db59993ab00ccd24c77280"
							]
						},
						"description": "This endpoint is used to update an existing venue's details. The venue ID must be provided in the URL, and the request body must include updated fields. Only users with the admin role can perform this action. Authentication is required via a JWT token.\n\n- **Method**: `PUT`\n    \n- **URL**: `/api/venues/:id`\n    \n- **Headers**:\n    \n    - `Authorization`: Bearer `{{token}}`\n        \n- **Body**: JSON containing any of the following:\n    \n    - `name` (String, optional): The updated name of the venue.\n        \n    - `location` (String, optional): The updated location of the venue.\n        \n    - `capacity` (Number, optional): The updated capacity of the venue.\n        \n    - `description` (Number, optional): The updated capacity of the venue.\n        \n- **Response**:\n    \n    - **200 OK**: Venue updated successfully.\n        \n    - **404 Not Found**: No venue found with the given ID.\n        \n    - **401 Unauthorized**: Missing or invalid JWT token.\n        \n    - **422 Unprocessable Entity**: Validation error."
					},
					"response": []
				},
				{
					"name": "Delete Venu By ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{localUrl}}/api/venues/66db59993ab00ccc24c77280",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"venues",
								"66db59993ab00ccc24c77280"
							]
						},
						"description": "This endpoint is used to delete a venue by its ID. Only users with the admin role can perform this action. Authentication is required via a JWT token.\n\n- **Method**: `DELETE`\n    \n- **URL**: `/api/venues/:id`\n    \n- **Headers**:\n    \n    - `Authorization`: Bearer `{{token}}`\n        \n- **Response**:\n    \n    - **200 OK**: Venue deleted successfully.\n        \n    - **404 Not Found**: No venue found with the given ID.\n        \n    - **401 Unauthorized**: Missing or invalid JWT token."
					},
					"response": []
				}
			],
			"description": "This collection contains API endpoints for managing venues. It allows users with the admin role to create, update, and delete venues, while all authenticated users can view venues. Each request requires authentication using a JWT token, which must be included in the request headers. The key functionalities of this collection include:\n\n- **Create Venue**: Admin users can create a new venue by providing details such as name, location, capacity and description.\n    \n- **Get All Venues**: Retrieves a list of all venues, with support for pagination and filtering by location.\n    \n- **Get Venue by ID**: Fetches details of a specific venue by its unique ID.\n    \n- **Update Venue**: Admin users can update the details of an existing venue, such as changing the name, location, capacity and description.\n    \n- **Delete Venue**: Admin users can delete a venue by its ID from the system.\n    \n\n> Admin-level permissions are required for creating, updating, and deleting venues. Make sure to include the JWT token in the Authorization header for all requests."
		},
		{
			"name": "Reservation",
			"item": [
				{
					"name": "Create Reservation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRjNGYxOTAxMTdkNmQ2NzBmN2MyZTIiLCJpYXQiOjE3MjU4MzQ3NzcsImV4cCI6MTcyNTkyMTE3N30.0XuI5msTCqTexG7CZqGw4vzGZHgmLkX92oJWs1a8aow",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"venueId\": \"66dc397a6684d5049fcd2acd\",\n    \"date\": \"2025-02-05\",\n    \"time\": \"21:00\",\n    \"numberOfPeople\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localUrl}}/api/reservations/",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"reservations",
								""
							]
						},
						"description": "This endpoint is used to create a new reservation for a specific venue. The user must provide the venue ID, date, time and number of people. Only users with the user role can create reservation. Authentication is required via a JWT token.\n\n- **Method**: `POST`\n    \n- **URL**: `/api/reservations`\n    \n- **Headers**:\n    \n    - `Authorization`: Bearer `{{token}}`\n        \n- **Body**: JSON containing:\n    \n    - `venueId` (String, required): The ID of the venue being reserved.\n        \n    - `date` (String, required): The date of the reservation (format: YYYY-MM-DD).\n        \n    - `time` (String, required): The time for the reservation (format: HH:mm).\n        \n    - numberOfPeople (number, required):\n        \n- **Response**:\n    \n    - **201 Created**: Reservation created successfully.\n        \n    - **422 Unprocessable Entity**: Validation error (e.g. date/time conflicts).\n        \n    - **404 Not Found**: No venue found with the given ID."
					},
					"response": []
				},
				{
					"name": "Get User Reservations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRlMDFhM2M5MmNkNmI2ODlhNjQxNjkiLCJpYXQiOjE3MjU4MzY5NDgsImV4cCI6MTcyNTkyMzM0OH0.00cdaDF2GowqusLSYRkOwCrsSLJU_SfzcrovaiU4Xl4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localUrl}}/api/reservations/",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"reservations",
								""
							]
						},
						"description": "This endpoint retrieves a list of all reservations made by a specific user. Authentication is required via a JWT token.\n\n- **Method**: `GET`\n    \n- **URL**: `/api/reservations/user/:userId`\n    \n- **Headers**:\n    \n    - `Authorization`: Bearer `{{token}}`\n        \n- **Response**:\n    \n    - **200 OK**: Returns a list of reservations made by the specified user.\n        \n    - **404 Not Found**: No reservations found for the given user ID.\n        \n    - **401 Unauthorized**: Missing or invalid JWT token."
					},
					"response": []
				},
				{
					"name": "Get Reservation Info",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRlMDFhM2M5MmNkNmI2ODlhNjQxNjkiLCJpYXQiOjE3MjU4MzY5NDgsImV4cCI6MTcyNTkyMzM0OH0.00cdaDF2GowqusLSYRkOwCrsSLJU_SfzcrovaiU4Xl4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localUrl}}/api/reservations/66dc6b3cce817a010c1514e0",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"reservations",
								"66dc6b3cce817a010c1514e0"
							]
						},
						"description": "This endpoint retrieves details of a specific reservation by its ID. Authentication is required via a JWT token. Access is based on user who created this reservation or admin role.\n\n- **Method**: `GET`\n    \n- **URL**: `/api/reservations/:id`\n    \n- **Headers**:\n    \n    - `Authorization`: Bearer `{{token}}`\n        \n- **Response**:\n    \n    - **200 OK**: Returns the reservation details for the specified ID.\n        \n    - **404 Not Found**: No reservation found with the given ID.\n        \n    - **401 Unauthorized**: Missing or invalid JWT token.\n        \n    - **403 Forbidden**: User doesn't have permission to the given reservation."
					},
					"response": []
				},
				{
					"name": "Delete Reservation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRjNGYxOTAxMTdkNmQ2NzBmN2MyZTIiLCJpYXQiOjE3MjU4MDI0MDAsImV4cCI6MTcyNTg4ODgwMH0.cjzNTVTTV-9nr2MCotPrQ1B1ftyx2SWIw8uPU6ktTCA",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{localUrl}}/api/reservations/66dc6b3cce817a010c1514e0",
							"host": [
								"{{localUrl}}"
							],
							"path": [
								"api",
								"reservations",
								"66dc6b3cce817a010c1514e0"
							]
						},
						"description": "This endpoint is used to delete a reservation by its ID. Authentication is required via a JWT token. Access is based on user who created this reservation or admin role.\n\n- **Method**: `DELETE`\n    \n- **URL**: `/api/reservations/:id`\n    \n- **Headers**:\n    \n    - `Authorization`: Bearer `{{token}}`\n        \n- **Response**:\n    \n    - **200 OK**: Reservation deleted successfully.\n        \n    - **404 Not Found**: No reservation found with the given ID.\n        \n    - **401 Unauthorized**: Missing or invalid JWT token.\n        \n    - **403 Forbidden**: User doesn't have permission to the given reservation."
					},
					"response": []
				}
			],
			"description": "This collection contains API endpoints for managing reservations. It allows users to create, view, and delete reservations for specific venues. Each request requires authentication using a JWT token, which must be included in the request headers. The key functionalities of this collection include:\n\n- **Create**: Creates a new reservation. Checks for existing reservations at the same time to prevent conflicts. Only proceeds if no reservation exists for the specified venue, date, and time slot. Returns the newly created reservation. After creating reservation, if you provided smtp details in .env, it will send mail about reservation creation to client.\n    \n- **Get User's Reservations**: Retrieves all reservations made by the authenticated user.\n    \n- **Get Reservation Info**: Retrieves a specific reservation by its ID. Allows access based on user role and ownership. Admin users can access any reservation, while regular users can only access their own reservations.\n    \n- **Delete Reservation**: Deletes a specific reservation by its ID. Allows deletion based on user role and ownership. Admin users can delete any reservation, while regular users can only delete their own reservations.\n    \n\n> Authentication is required for all operations. Ensure to include the JWT token in the Authorization header for all requests."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "localUrl",
			"value": "http://localhost:3001",
			"type": "string"
		}
	]
}